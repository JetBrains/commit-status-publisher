import java.nio.file.Paths

def localRepo = anyParamPath('TC_LOCAL_REPO')
def pluginVersion = anyParam('PluginVersion')
def teamcityVersion = anyParam('teamcityVersion') ?: 'LOCAL-SNAPSHOT'

allprojects {
  apply plugin: 'java'

  group = 'org.jetbrains.teamcity'
  version = pluginVersion

  clean {
    delete "target"
  }
}

subprojects {

  apply plugin: 'java'

  repositories {
    if (localRepo) {
      maven {
        name = "local-teamcity-artifacts"
        url "file:///${localRepo}"
      }
    }
    maven {
      url = 'https://download.jetbrains.com/teamcity-repository'
    }
    maven {
      url = 'https://repo.labs.intellij.net/teamcity'
    }

    maven {
      url = 'https://cache-redirector.jetbrains.com/repo.maven.apache.org/maven2'
    }
    mavenLocal()
  }

  sourceCompatibility = '1.8'
}

task copyDependencies(type: Copy, dependsOn: ':commit-status-publisher-server:jar') {
  project(':commit-status-publisher-server').configurations.getAt("runtime").setCanBeResolved(true)
  println("implementation canBeResolved change to ï¼š" + project(':commit-status-publisher-server').configurations.getAt("runtime").canBeResolved)
  from project(':commit-status-publisher-server').configurations.getAt("runtime")
  include 'jsch*.jar'
  into './build/dependencies'
}


task copyPluginFiles(type: Copy, dependsOn: ':commit-status-publisher-server:jar') {
  from '.'
  include 'teamcity-plugin.xml'
  into './build/plugin-files'
  expand(PluginVersion: pluginVersion)
}

task zipPlugin(type: Zip, dependsOn: ['copyDependencies', 'copyPluginFiles']) {
  destinationDir = new File(rootDir, './target')
  into('server') {
    from project(':commit-status-publisher-server').configurations.runtime.allArtifacts.files
    include '*'
    from './build/dependencies'
    include '*'
  }
  into('kotlin-dsl') {
    from 'kotlin-dsl'
    include 'CommitStatusPublisher.xml'
  }
  from './build/plugin-files'
  include 'teamcity-plugin.xml'

  archiveName = 'commit-status-publisher.zip'
}

build.dependsOn zipPlugin


def anyParamPath(String... names) {
  def param = anyParam(names);
  if (param == null || param.isEmpty()) {
    return null
  }
  return (Paths.get(param).isAbsolute()) ?
         Paths.get(param) : getRootDir().toPath().resolve(param)
}

def anyParam(String... names) {
  def param
  try {
    param = names.findResult {
      project.hasProperty(it) ? project.getProperty(it) : System.getProperty(it) ?: System.getenv(it) ?: null
    }
    if (param == null || param.isEmpty()) {
      param = null
    }
  } finally {
    println("AnyParam: $names -> $param")
  }
  return param
}