<%--@elvariable id="tokenConnection" type="java.lang.String"--%>
<%--@elvariable id="tokenUsername" type="java.lang.String"--%>
<%--@elvariable id="tokenUser" type="java.lang.String"--%>
<%--@elvariable id="keys" type="jetbrains.buildServer.commitPublisher.Constants"--%>

<c:set var="connectionName" value="${empty tokenConnection ? 'unknown' : tokenConnection}"/>
<c:set var="user" value="${empty tokenUser ? '' : tokenUser}"/>
<c:set var="username" value="${empty tokenUsername ? '' : tokenUsername}"/>

<script type="text/javascript">
  BS.AuthTypeTokenSupport = {

    tokenUser: '<bs:forJs>${user}</bs:forJs>',
    tokenUsername: '<bs:forJs>${username}</bs:forJs>',
    tokenConnection: '<bs:forJs>${connectionName}</bs:forJs>',

    connections: {},

    updateTokenMessage: function () {
      const tokenValue = $('${keys.tokenId}').value;
      if (tokenValue === null || tokenValue.trim().length == 0) {
        $('message_no_token').show();
        $('message_we_have_token').hide();
      } else {
        const userInfo = this.buildUserInfo();
        const tokenInfo = 'Currently configured access token was issued for <strong>' + userInfo.escapeHTML() + '</strong> via <strong>' + this.tokenConnection.escapeHTML() + '</strong>.';
        $('message_no_token').hide();
        $('message_we_have_token').innerHTML = tokenInfo;
        $('message_we_have_token').show();
      }
      $j('#error_${keys.tokenId}').empty();
    },

    tokenCallback: (it) => {
      $('${keys.tokenId}').value = it.tokenId;

      BS.AuthTypeTokenSupport.tokenUser = it['teamcityName'];
      BS.AuthTypeTokenSupport.tokenUsername = it['teamcityUsername'];
      BS.AuthTypeTokenSupport.tokenConnection = BS.AuthTypeTokenSupport.nvl(BS.AuthTypeTokenSupport.connections[it.connectionId]);

      BS.AuthTypeTokenSupport.updateTokenMessage();
    },

    buildUserInfo: function () {
      return this.tokenUsername + (this.tokenUser ? ' (' + this.tokenUser + ')' : '');
    },

    nvl: function (val) {
      return !val || val.trim().length == 0 ? 'unknown' : val;
    }
  };

  BS.AuthTypeTokenSupport.updateTokenMessage();
</script>